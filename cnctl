#!/usr/bin/python
import os
import sys
from getopt import getopt
from signal import signal, SIGPIPE
from comnctl import task, taskList, agentList

DRYRUN = False

def parseTasks(tasks):
    t_dict = {}
    t_order = []
    for task in tasks:
        try:
            agent = ""
            agent, task = task.split('.',1)
        except ValueError:
            pass

        if task in taskList.names:
            # Expand the task list for dependencies
            expanded = taskList[task].depends
            expanded.append((agent, task))

            for agent, task in expanded:
                # Add each new task
                if task not in t_order:
                    t_order.append(task)
                    t_dict[task] = []
                else:
                    continue
                if agent in agentList.names:
                    if agentList[agent] not in t_dict[task]:
                        t_dict[task].append(agentList[agent])
                elif len(agent) == 0:
                    for a in agentList:
                        if a.__type__() == "Agent":
                            if a not in t_dict[task]:
                                t_dict[task].append(a)
                else:
                    print "cnctl Error: Unknown agent %s" % str(agent)
                    usage()
                    sys.exit(-1)
        else:
            print "cnctl Error: Unknown task: %s" % task
            usage()
            sys.exit(-1)
    return t_dict, t_order

def runTasks(tasks, order):
    procs = []
    for task in order:
        for agent in tasks[task]:
            if agent.__type__() == "Agent":
                call(task, agent)
            else:
                for a in agent._list:
                    call(task, agentList[a])
        for agent in tasks[task]:
            if agent.__type__() == "Agent":
                if agent.connection:
                    if taskList[task].background:
                        procs.append(agent.connection)
                    else:
                        agent.flush()
                agent.reset()
            else:
                for a in agent._list:
                    if agentList[a].connection:
                        if taskList[task].background:
                            procs.append(agentList[a].connection)
                        else:
                            agentList[a].flush()
                    agentList[a].reset()
    return procs

def usage():
    # Print all of the options
    print "%s [agent].task" % os.path.basename(sys.argv[0])
    print "Agents:"
    for a in agentList:
        if len(a._desc):
            print str(a)
    print ""
    print "Tasks:"
    for t in taskList:
        print str(t)

def call(taskName, agent):
    taskList[taskName](agent)
    if not taskList[taskName].background:
        agent.end()

def handler(signum, frame):
    # Not sure about this yet
    print 'Signal:', signum

if __name__ == "__main__":
    # Look for arguments
    if os.path.isdir('cnctl'):
        # How do I import the directory?
        sys.path.append('.')
        from cnctl import *
    elif os.path.isfile('cnctl.py'):
        # How do I import the file
        sys.path.append('.')
        from cnctl import *
    else:
        print "You must run this in a directory with a cnctl file"
        sys.exit(-1)

    if 'setup' in taskList.names:
        call('setup', local)

    signal(SIGPIPE, handler)

    if len(sys.argv) == 1:
        usage()
        sys.exit(0)

    # Parse the input
    (opts, args) = getopt(sys.argv[1:], "h", ['help', 'dryrun'])
    for o, a in opts:
        if o in ['-h', '--help']:
            usage()
            sys.exit(0)
        elif o in ['--dryrun']:
            # Set dryrun - Currently not implemented
            DRYRUN = True

    # Create the dependency list
    tasks, order = parseTasks(args)
    waiting = runTasks(tasks, order)
    while len(waiting):
        output = [conn.stdout for conn in waiting]
        errput = [conn.stderr for conn in waiting]
        data, nothing, error = select(output, [], errput, 100)
        for fd in data:
            for line in fd.readlines():
                conn.agent.out(line.rstrip())
        for fd in error:
            for line in fd.readlines():
                conn.agent.err(line.rstrip())
        finished = filter(lambda conn: conn.returncode != None, waiting)
        waiting = filter(lambda conn: conn.returncode == None, waiting)
        for conn in waiting:
            conn.poll()
        for conn in finished:
            conn.agent.ret(conn.returncode)
